from ast import parse
from dataclasses import dataclass
from datetime import datetime
from typing import Any
import hashlib
import os
import os.path as osp

from __main__ import USER_DIR, _DEBUG_, parse_utc, print_utc


@dataclass
class UserSettings:
    def to_jsonobj(self) -> dict[str, Any]:
        return { }

    @staticmethod
    def from_jsonobj(jsonobj : dict[str, Any]) -> 'UserSettings':
        return UserSettings( )


@dataclass
class UserInfo:
    uname : str
    settings : UserSettings
    date : datetime | None
    token : str | None
    passw : str | None
    hash : str

    def to_jsonobj(self) -> dict[str, Any]:
        return {
            'uname' : self.uname,
            'settings': self.settings.to_jsonobj(),
            'date' : print_utc(self.date),
            'token' : self.token,
            'hash': self.hash,
        }

    @staticmethod
    def from_jsonobj(jsonobj : dict[str, Any]) -> 'UserInfo':
        return UserInfo(
            uname = jsonobj['uname'],
            settings = UserSettings.from_jsonobj(jsonobj['settings']),
            date = parse_utc(jsonobj['date']),
            token = jsonobj['token'],
            hash = jsonobj['hash']
        )



USER_FILE = 'users.txt'
USER_SETTINGS = 'user-settings.json'
USER_ROOT = 'root'
USER_INFOS : dict[str, UserInfo] = { }


def sha512(string : str) -> str: return hashlib.sha512(string.encode('utf-8')).hexdigest()

def compute_hash(uname : str, passwd : str) -> str: return sha512(sha512(uname + passwd) + uname)

def add_user(uname : str, passwd : str) -> UserInfo:
    info = UserInfo(uname, UserSettings(), None, None, passwd, compute_hash(uname, passwd))
    USER_INFOS[uname] = info

    return info


if osp.isfile(osp.join(USER_DIR, USER_FILE)):
    try:
        with open(osp.join(USER_DIR, USER_FILE), 'r') as f:
            for line in f.readlines():
                line = line.strip()
                if not line.startswith('#') and ':' in line:
                    line = line.split(':')
                    add_user(line[0], ':'.join(line[1:]) if len(line) > 1 else '')
    except:
        pass

if not USER_ROOT in USER_INFOS:
    print(f'''
    ----------------------------------------------------------------------------
    The "{USER_ROOT}" user does not seem to be defined in "{USER_FILE}". We will
    therefore re-add the user "{USER_ROOT}". Please enter the new password for
    "{USER_ROOT}" below.
    ''')
    passw = input()
    add_user(USER_ROOT, passw)
    print(f'''The password for the user "{USER_ROOT}" has been changed to "{passw}".
    You may change it at any time by editing the file "{USER_FILE}".''')

with open(osp.join(USER_DIR, USER_FILE), 'w') as f:
    f.write(f'''# WARNING: THIS IS A PARTIALLY AUTOGENERATED FILE.
# ALL COMMENTS OR INVALID LINES WILL BE LOST ON REGENERATION.
#
# This file contains a list of users allowed to use the YAYAT application.
# Each user is specified by the string <username>:<password>. YATAT further
# requires a root user by the name of "{USER_ROOT}" to be defined.


''' + '\n'.join(f'# {u.hash}\n{u.uname}:{u.passw}' for u in USER_INFOS.values()))

if _DEBUG_:
    print(f'''\x1b[1m\x1b[31m
    ╔═══════════════════════════════════════════╗
╭───╢ WARNING: THIS SERVER RUNS IN DEBUG MODE.  ╟───╮
│ ! ║   ALL API AUTHENTICATIONS ARE DISABLED.   ║ ! │
╰───╢ EVERYTHING IS RUNNING AS "ROOT" API USER. ╟───╯
    ╚═══════════════════════════════════════════╝
    \x1b[0m''')